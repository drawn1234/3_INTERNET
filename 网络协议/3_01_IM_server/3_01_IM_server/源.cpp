#include<Windows.h>
#include<iostream>
#include"../kernel/CKernel.h"

using namespace std;

int main() {
	CKernel kernel;
	if (!kernel.startServer()) {
		cout << "打开网络失败" << endl;
	}
	while (true) {
		Sleep(50000);
		cout << "imserver is running" << endl;
	}

	return 0;
}


//IM--聊天系统
//功能
/*1.注册（手机号，密码，昵称）
* 2.登陆账号（手机号，密码）
* 3.添加好友（仅支持昵称）
* 4.聊天窗口界面
* //5.主界面
* 6.下线 -由服务端维护socket通信状态
* //7.上线
*/

/*面向对象编程，分析系统框架
* 
* 客户端QT
* 核心处理类(处理收到的数据，组织要发送的数据)-注册信息，聊天信息，在线状态
* UI界面
* 网络类（收发数据，初始化网络，关闭网络）
* 中介者类

*服务端VS
* 数据库（好友关系，账号数据，信息） 
* 核心处理类(处理收到的数据，组织要发送的数据)
* 中介者类
//不做数据处理，只做转发
//代码量不大的时候不使用中介者类也可以，添加是为了方便以后的功能扩展
* 网络类（收发数据，初始化网络，关闭网络） UDP-TCP协议
*/

//网络类
//封装继承多态
//父类：定义接口--纯虚函数
//子类：实现函数：UDP子类，TCPClient子类，TCPServer子类

//中介者：架构和网络类一样
//父类：
//子类：


//数据结构STL：
//vector:数组，数据连续存储，知道下标查找快，不知道下标查找慢，下标是连续的。增加和删除数据不方便
//一串连续的数字
//list:数据不连续存储，查找效率低，插入删除方便，
//经常插入删除

//stack:数据先进后出
//queue:数据先进先出
//对数据顺序有要求

//map:key-value，自动排序，查找快
//一一对应的无序数据
//set:key和value相等，查找快
//没有对应关系的无序数据

//创建数据库和表
//用户信息表：用户id（更快，是数值int），手机号（字符串，查找速度慢），密码，昵称，签名，头像id（头像只支持系统自带头像图片）
//好友关系表：ida，idb。（好友关系型要双向存储1和2是好友，需要存储1-2，2-1）缺点：浪费空间 优点：节省时间（服务端），一个表可以查到所有的好友关系。
//